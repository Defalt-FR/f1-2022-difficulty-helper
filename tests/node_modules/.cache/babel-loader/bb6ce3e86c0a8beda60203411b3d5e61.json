{"ast":null,"code":"var _jsxFileName = \"/home/rlfh/f1-2022-difficulty-helper/src/Track.jsx\";\nimport React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport luxon, { DateTime, Duration } from 'luxon';\nimport ChronoTime, { toMillis, MILLISECONDS_PER_SECOND } from './ChronoTime';\n\nclass Track extends React.Component {\n  render() {\n    if (!this.props.data) {\n      return '';\n    }\n\n    const MAX_AI_LEVEL = 110;\n    const trackId = this.props.data.id;\n    const trackInfo = this.props.data;\n    console.debug('Track Info:', JSON.stringify(trackInfo));\n    const targetLap = this.props.targetLap;\n\n    const formatLapTimeFromMillis = timeMs => {\n      return ''.concat(Math.floor(timeMs / MILLISECONDS_PER_SECOND), ',', Math.abs(timeMs % MILLISECONDS_PER_SECOND).toString().padStart(3, '0'));\n    };\n\n    var targetLevel = trackInfo.times.find(el => {\n      var dtLapTime = DateTime.fromFormat(el, \"m:s,SSS\");\n      var lapTimeMs = toMillis(dtLapTime);\n      console.debug('lapTimeMs:', lapTimeMs);\n      console.debug('targetLap:', targetLap);\n      console.debug('targetLap >= lapTimeMs:', targetLap >= lapTimeMs);\n      return targetLap <= lapTimeMs;\n    });\n    var targetLevelPos = trackInfo.times.indexOf(targetLevel);\n    console.log('Target level position:', targetLevelPos);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, \"Track information\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"track-information\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"track-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: '/flags/'.concat(trackId, '.png'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }\n    }), \" \", trackInfo.circuit), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"track-map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: '/tracks/'.concat(trackId, '.png'),\n      width: \"600px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, \"Recommended difficulty level\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"difficulty-level\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, MAX_AI_LEVEL - targetLevelPos), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, \"Track times\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      responsive: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 29\n      }\n    }, \"AI Level\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 29\n      }\n    }, \"Target time\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 29\n      }\n    }, \"Delta\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, trackInfo.times == null ? '' : trackInfo.times.map((time, i) => {\n      let delta = targetLap - toMillis(DateTime.fromFormat(time, \"m:s,SSS\"));\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 41\n        }\n      }, MAX_AI_LEVEL - i, \" \", i == targetLevelPos ? ' ⭐' : '', \" \"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 41\n        }\n      }, time), /*#__PURE__*/React.createElement(\"td\", {\n        class: delta >= 0 ? 'delta-positive' : 'delta-negative',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 41\n        }\n      }, formatLapTimeFromMillis(delta)));\n    })))));\n  }\n\n}\n\nexport default Track;","map":{"version":3,"sources":["/home/rlfh/f1-2022-difficulty-helper/src/Track.jsx"],"names":["React","Component","Table","luxon","DateTime","Duration","ChronoTime","toMillis","MILLISECONDS_PER_SECOND","Track","render","props","data","MAX_AI_LEVEL","trackId","id","trackInfo","console","debug","JSON","stringify","targetLap","formatLapTimeFromMillis","timeMs","concat","Math","floor","abs","toString","padStart","targetLevel","times","find","el","dtLapTime","fromFormat","lapTimeMs","targetLevelPos","indexOf","log","circuit","map","time","i","delta"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Table from 'react-bootstrap/Table';\nimport luxon, { DateTime, Duration } from 'luxon';\nimport ChronoTime, { toMillis, MILLISECONDS_PER_SECOND } from './ChronoTime';\n\nclass Track extends React.Component\n{\n    render() {        \n        if ( !this.props.data ) {\n            return('');\n        }\n\n        const MAX_AI_LEVEL = 110;\n        const trackId = this.props.data.id;\n        const trackInfo = this.props.data;\n        console.debug('Track Info:', JSON.stringify(trackInfo));\n        const targetLap = this.props.targetLap;\n\n        const formatLapTimeFromMillis = (timeMs) => {\n            return ''.concat( Math.floor(timeMs / MILLISECONDS_PER_SECOND), ',', Math.abs(timeMs % MILLISECONDS_PER_SECOND).toString().padStart(3, '0'));\n\n        }\n\n        var targetLevel = trackInfo.times.find( (el) => {\n\n            var dtLapTime = DateTime.fromFormat(el, \"m:s,SSS\");\n            var lapTimeMs =  toMillis(dtLapTime);                            \n            console.debug('lapTimeMs:', lapTimeMs);\n            console.debug('targetLap:', targetLap);\n            console.debug('targetLap >= lapTimeMs:', targetLap >= lapTimeMs);\n            return targetLap <= lapTimeMs;\n        });\n\n        var targetLevelPos = trackInfo.times.indexOf(targetLevel);\n        console.log('Target level position:', targetLevelPos);\n\n        return (            \n            <div>\n                <h3>Track information</h3>                        \n                <div class='track-information'>\n                    <div class='track-name'>\n                        <img src={'/flags/'.concat(trackId, '.png')}/> { trackInfo.circuit }\n                    </div>\n                    <div class='track-map'>\n                        <img src={ '/tracks/'.concat(trackId, '.png')} width='600px' />\n                    </div>\n                </div>\n                <h4>Recommended difficulty level</h4>\n                <div class='difficulty-level'>\n                    { MAX_AI_LEVEL - targetLevelPos }\n                </div>\n                <h4>Track times</h4>\n                <div>\n                <Table responsive>\n                    <thead>\n                        <tr>\n                            <th>AI Level</th>\n                            <th>Target time</th>\n                            <th>Delta</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {                                    \n                        trackInfo.times == null ? '' : trackInfo.times.map( (time, i) => {                                \n                                let delta = targetLap - toMillis(DateTime.fromFormat(time, \"m:s,SSS\"));     \n                                return (                                       \n                                    <tr>                                    \n                                        <td>{MAX_AI_LEVEL - i} { i == targetLevelPos ? ' ⭐' : '' } </td> \n                                        <td>{time}</td> \n                                        <td class={(delta >= 0) ? 'delta-positive' : 'delta-negative'}>\n                                        { \n                                            formatLapTimeFromMillis( delta )\n                                        }\n                                        </td>\n                                    </tr>\n                                );\n                            }\n                        )\n                    }\n                    </tbody>\n                </Table>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Track;"]},"metadata":{},"sourceType":"module"}